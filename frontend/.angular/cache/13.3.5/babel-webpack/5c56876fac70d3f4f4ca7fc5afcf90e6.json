{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Projet_Banxaas\\\\banxaas\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http; // tslint:disable-next-line: member-ordering\n\n    this.authUrl = 'http://127.0.0.1:8000/api/connexion/';\n    this.registerUrl = 'http://127.0.0.1:8000/api/createAccount/';\n    this.codeUrl = 'http://127.0.0.1:8000/api/validateCode/';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + localStorage.getItem('token')\n      })\n    };\n  }\n  /** POST Connexion*/\n\n\n  login(login, password) {\n    return this.http.post(this.authUrl, {\n      login,\n      password\n    }, this.httpOptions);\n  }\n  /** POST Create Account*/\n\n\n  createAccount(pseudo, password, email, phone) {\n    return this.http.post(this.registerUrl, {\n      pseudo,\n      password,\n      email,\n      phone\n    }, this.httpOptions);\n  }\n  /** POST Valid Account*/\n\n\n  validAccount(code, tokenId) {\n    return this.http.post(this.codeUrl, {\n      code,\n      tokenId\n    }, this.httpOptions);\n  }\n  /** POST Valid Account*/\n\n\n  uniqConnexion(id, signature) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield _this.http.post(_this.codeUrl, {\n        id,\n        signature\n      }, _this.httpOptions);\n      const data = yield response;\n    })();\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","i0","i1","AuthService","constructor","http","authUrl","registerUrl","codeUrl","httpOptions","headers","Authorization","localStorage","getItem","login","password","post","createAccount","pseudo","email","phone","validAccount","code","tokenId","uniqConnexion","id","signature","response","data","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"sources":["C:/Projet_Banxaas/banxaas/frontend/src/app/parameters/auth.service.ts"],"sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class AuthService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        // tslint:disable-next-line: member-ordering\r\n        this.authUrl = 'http://127.0.0.1:8000/api/connexion/';\r\n        this.registerUrl = 'http://127.0.0.1:8000/api/createAccount/';\r\n        this.codeUrl = 'http://127.0.0.1:8000/api/validateCode/';\r\n        this.httpOptions = {\r\n            headers: new HttpHeaders({ 'Content-Type': 'application/json', Authorization: 'Bearer ' + localStorage.getItem('token') })\r\n        };\r\n    }\r\n    /** POST Connexion*/\r\n    login(login, password) {\r\n        return this.http.post(this.authUrl, { login, password }, this.httpOptions);\r\n    }\r\n    /** POST Create Account*/\r\n    createAccount(pseudo, password, email, phone) {\r\n        return this.http.post(this.registerUrl, { pseudo, password, email, phone }, this.httpOptions);\r\n    }\r\n    /** POST Valid Account*/\r\n    validAccount(code, tokenId) {\r\n        return this.http.post(this.codeUrl, { code, tokenId }, this.httpOptions);\r\n    }\r\n    /** POST Valid Account*/\r\n    async uniqConnexion(id, signature) {\r\n        const response = await this.http.post(this.codeUrl, { id, signature }, this.httpOptions);\r\n        const data = await response;\r\n    }\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\r\n"],"mappings":";AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;EACrBC,WAAW,CAACC,IAAD,EAAO;IACd,KAAKA,IAAL,GAAYA,IAAZ,CADc,CAEd;;IACA,KAAKC,OAAL,GAAe,sCAAf;IACA,KAAKC,WAAL,GAAmB,0CAAnB;IACA,KAAKC,OAAL,GAAe,yCAAf;IACA,KAAKC,WAAL,GAAmB;MACfC,OAAO,EAAE,IAAIV,WAAJ,CAAgB;QAAE,gBAAgB,kBAAlB;QAAsCW,aAAa,EAAE,YAAYC,YAAY,CAACC,OAAb,CAAqB,OAArB;MAAjE,CAAhB;IADM,CAAnB;EAGH;EACD;;;EACAC,KAAK,CAACA,KAAD,EAAQC,QAAR,EAAkB;IACnB,OAAO,KAAKV,IAAL,CAAUW,IAAV,CAAe,KAAKV,OAApB,EAA6B;MAAEQ,KAAF;MAASC;IAAT,CAA7B,EAAkD,KAAKN,WAAvD,CAAP;EACH;EACD;;;EACAQ,aAAa,CAACC,MAAD,EAASH,QAAT,EAAmBI,KAAnB,EAA0BC,KAA1B,EAAiC;IAC1C,OAAO,KAAKf,IAAL,CAAUW,IAAV,CAAe,KAAKT,WAApB,EAAiC;MAAEW,MAAF;MAAUH,QAAV;MAAoBI,KAApB;MAA2BC;IAA3B,CAAjC,EAAqE,KAAKX,WAA1E,CAAP;EACH;EACD;;;EACAY,YAAY,CAACC,IAAD,EAAOC,OAAP,EAAgB;IACxB,OAAO,KAAKlB,IAAL,CAAUW,IAAV,CAAe,KAAKR,OAApB,EAA6B;MAAEc,IAAF;MAAQC;IAAR,CAA7B,EAAgD,KAAKd,WAArD,CAAP;EACH;EACD;;;EACMe,aAAa,CAACC,EAAD,EAAKC,SAAL,EAAgB;IAAA;;IAAA;MAC/B,MAAMC,QAAQ,SAAS,KAAI,CAACtB,IAAL,CAAUW,IAAV,CAAe,KAAI,CAACR,OAApB,EAA6B;QAAEiB,EAAF;QAAMC;MAAN,CAA7B,EAAgD,KAAI,CAACjB,WAArD,CAAvB;MACA,MAAMmB,IAAI,SAASD,QAAnB;IAF+B;EAGlC;;AA3BoB;;AA6BzBxB,WAAW,CAAC0B,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;EAAE,OAAO,KAAKA,CAAC,IAAI5B,WAAV,EAAuBF,EAAE,CAAC+B,QAAH,CAAY9B,EAAE,CAAC+B,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACA9B,WAAW,CAAC+B,KAAZ,GAAoB,aAAcjC,EAAE,CAACkC,kBAAH,CAAsB;EAAEC,KAAK,EAAEjC,WAAT;EAAsBkC,OAAO,EAAElC,WAAW,CAAC0B,IAA3C;EAAiDS,UAAU,EAAE;AAA7D,CAAtB,CAAlC"},"metadata":{},"sourceType":"module"}