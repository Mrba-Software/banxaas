{"ast":null,"code":"import _asyncToGenerator from \"/code/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http; // tslint:disable-next-line: member-ordering\n\n    this.authUrl = 'http://127.0.0.1:8000/api/connexion/';\n    this.registerUrl = 'http://127.0.0.1:8000/api/createAccount/';\n    this.codeUrl = 'http://127.0.0.1:8000/api/validateCode/';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + localStorage.getItem('token')\n      })\n    };\n  }\n  /** POST Connexion*/\n\n\n  login(login, password) {\n    return this.http.post(this.authUrl, {\n      login,\n      password\n    }, this.httpOptions);\n  }\n  /** POST Create Account*/\n\n\n  createAccount(pseudo, password, email, phone) {\n    return this.http.post(this.registerUrl, {\n      pseudo,\n      password,\n      email,\n      phone\n    }, this.httpOptions);\n  }\n  /** POST Valid Account*/\n\n\n  validAccount(code, tokenId) {\n    return this.http.post(this.codeUrl, {\n      code,\n      tokenId\n    }, this.httpOptions);\n  }\n  /** POST Valid Account*/\n\n\n  uniqConnexion(id, signature) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield _this.http.post(_this.codeUrl, {\n        id,\n        signature\n      }, _this.httpOptions);\n      const data = yield response;\n    })();\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/code/frontend/src/app/parameters/auth.service.ts"],"names":["HttpHeaders","i0","i1","AuthService","constructor","http","authUrl","registerUrl","codeUrl","httpOptions","headers","Authorization","localStorage","getItem","login","password","post","createAccount","pseudo","email","phone","validAccount","code","tokenId","uniqConnexion","id","signature","response","data","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ,CADc,CAEd;;AACA,SAAKC,OAAL,GAAe,sCAAf;AACA,SAAKC,WAAL,GAAmB,0CAAnB;AACA,SAAKC,OAAL,GAAe,yCAAf;AACA,SAAKC,WAAL,GAAmB;AACfC,MAAAA,OAAO,EAAE,IAAIV,WAAJ,CAAgB;AAAE,wBAAgB,kBAAlB;AAAsCW,QAAAA,aAAa,EAAE,YAAYC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAAjE,OAAhB;AADM,KAAnB;AAGH;AACD;;;AACAC,EAAAA,KAAK,CAACA,KAAD,EAAQC,QAAR,EAAkB;AACnB,WAAO,KAAKV,IAAL,CAAUW,IAAV,CAAe,KAAKV,OAApB,EAA6B;AAAEQ,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAA7B,EAAkD,KAAKN,WAAvD,CAAP;AACH;AACD;;;AACAQ,EAAAA,aAAa,CAACC,MAAD,EAASH,QAAT,EAAmBI,KAAnB,EAA0BC,KAA1B,EAAiC;AAC1C,WAAO,KAAKf,IAAL,CAAUW,IAAV,CAAe,KAAKT,WAApB,EAAiC;AAAEW,MAAAA,MAAF;AAAUH,MAAAA,QAAV;AAAoBI,MAAAA,KAApB;AAA2BC,MAAAA;AAA3B,KAAjC,EAAqE,KAAKX,WAA1E,CAAP;AACH;AACD;;;AACAY,EAAAA,YAAY,CAACC,IAAD,EAAOC,OAAP,EAAgB;AACxB,WAAO,KAAKlB,IAAL,CAAUW,IAAV,CAAe,KAAKR,OAApB,EAA6B;AAAEc,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAA7B,EAAgD,KAAKd,WAArD,CAAP;AACH;AACD;;;AACMe,EAAAA,aAAa,CAACC,EAAD,EAAKC,SAAL,EAAgB;AAAA;;AAAA;AAC/B,YAAMC,QAAQ,SAAS,KAAI,CAACtB,IAAL,CAAUW,IAAV,CAAe,KAAI,CAACR,OAApB,EAA6B;AAAEiB,QAAAA,EAAF;AAAMC,QAAAA;AAAN,OAA7B,EAAgD,KAAI,CAACjB,WAArD,CAAvB;AACA,YAAMmB,IAAI,SAASD,QAAnB;AAF+B;AAGlC;;AA3BoB;;AA6BzBxB,WAAW,CAAC0B,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAI5B,WAAV,EAAuBF,EAAE,CAAC+B,QAAH,CAAY9B,EAAE,CAAC+B,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACA9B,WAAW,CAAC+B,KAAZ,GAAoB,aAAcjC,EAAE,CAACkC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEjC,WAAT;AAAsBkC,EAAAA,OAAO,EAAElC,WAAW,CAAC0B,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n    constructor(http) {\n        this.http = http;\n        // tslint:disable-next-line: member-ordering\n        this.authUrl = 'http://127.0.0.1:8000/api/connexion/';\n        this.registerUrl = 'http://127.0.0.1:8000/api/createAccount/';\n        this.codeUrl = 'http://127.0.0.1:8000/api/validateCode/';\n        this.httpOptions = {\n            headers: new HttpHeaders({ 'Content-Type': 'application/json', Authorization: 'Bearer ' + localStorage.getItem('token') })\n        };\n    }\n    /** POST Connexion*/\n    login(login, password) {\n        return this.http.post(this.authUrl, { login, password }, this.httpOptions);\n    }\n    /** POST Create Account*/\n    createAccount(pseudo, password, email, phone) {\n        return this.http.post(this.registerUrl, { pseudo, password, email, phone }, this.httpOptions);\n    }\n    /** POST Valid Account*/\n    validAccount(code, tokenId) {\n        return this.http.post(this.codeUrl, { code, tokenId }, this.httpOptions);\n    }\n    /** POST Valid Account*/\n    async uniqConnexion(id, signature) {\n        const response = await this.http.post(this.codeUrl, { id, signature }, this.httpOptions);\n        const data = await response;\n    }\n}\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient)); };\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}